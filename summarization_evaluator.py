import math
import nltk
import sys
from utils import util
from rouge import Rouge

#Read summarization text
with open(sys.argv[1], 'r') as inputSumm:
    sys_summ = inputSumm.read()
inputSumm.close()

#Read reference text
with open(sys.argv[2], 'r') as inputRef:
    ref_summ = inputRef.read()
inputRef.close()

#Read source text
with open(sys.argv[3], 'r') as sourceText:
    src = sourceText.read()
sourceText.close()

sys_summ_tokens = nltk.word_tokenize(sys_summ)
ref_summ_tokens = nltk.word_tokenize(ref_summ)
src_text_tokens = nltk.word_tokenize(src)

#Get compression rate as a percentage of original Text
compression_rate = len(sys_summ_tokens) / len(src_text_tokens)
print('Compression Rate: %f%%'%(compression_rate*100))

#Filter out system and reference summary stop_words
filtered_system_summary = []
for sW in sys_summ_tokens:
    if sW not in util.stop_words and sW not in util.punc:
        #print(sW)
        filtered_system_summary.append(sW.lower())

filtered_ref_summary = []
for rW in ref_summ_tokens:
    if rW not in util.stop_words and rW not in util.punc:
        filtered_ref_summary.append(rW.lower())

#Calculate Rouge-1 scores: Using precision and recall base on word overlaps between system summary and reference summary
overlap_tokens = 0
tokens_sys_summ = len(filtered_system_summary)
tokens_ref_summ = len(filtered_ref_summary)

for w in filtered_system_summary:
    if (w in filtered_ref_summary):
        #print(w) DEBUG
        overlap_tokens += 1
        filtered_ref_summary.remove(w)

recall = overlap_tokens/tokens_ref_summ
precision = overlap_tokens/tokens_sys_summ
f_score = 2/((1/precision)+(1/recall))

print('\nROUGE-1 Scores\nF-SCORE: %f\nPRECISION: %f\nRECALL: %f\n'%(f_score, precision, recall))

#Scores generated by Rouge package - considers all words
print('Results from Rouge package')
rouge = Rouge()
scores = rouge.get_scores(sys_summ, ref_summ, avg=True)
print(scores)
